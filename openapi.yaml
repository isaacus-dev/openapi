info:
  title: Isaacus API
  version: 0.7.0
  description: A RESTful API for using Isaacus legal AI models, data and other solutions.
  termsOfService: https://isaacus.com/terms
  contact:
    name: Isaacus Support
    url: https://isaacus.com/support
    email: support@isaacus.com
  license:
    name: Apache 2.0
    url: https://github.com/isaacus-dev/openapi/blob/main/LICENSE
openapi: 3.1.0
servers:
- url: https://api.isaacus.com/v1
paths:
  /embeddings:
    post:
      tags:
      - Embeddings
      summary: Embedding
      description: Embed legal texts with an Isaacus legal AI embedder.
      operationId: CreateEmbeddings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingRequest'
        required: true
      responses:
        '200':
          description: The content has been successfully embedded.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingResponse'
        '400':
          description: The request was invalid or could not be processed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Validation error:
                  summary: Validation error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Validation error
                    status: 400
                    detail: The request was invalid or could not be processed.
                    instance: null
                Embedding input too large error:
                  summary: Embedding input too large error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Embedding input too large error
                    status: 400
                    detail: The input to the embedding model exceeds the maximum allowed
                      size.
                    instance: null
                Unsupported embedding dimension error:
                  summary: Unsupported embedding dimension error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Unsupported embedding dimension error
                    status: 400
                    detail: The provided embedding dimension is not supported by the
                      model.
                    instance: null
                Unsupported embedding task error:
                  summary: Unsupported embedding task error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Unsupported embedding task error
                    status: 400
                    detail: The provided embedding task is not supported by the model.
                    instance: null
        '401':
          description: The API key you provided does not exist, is expired or revoked,
            or is not authorized to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAPIKeyError'
              examples:
                Unauthorized API key error:
                  summary: Unauthorized API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Unauthorized API key error
                    status: 401
                    detail: The API key you provided does not exist, is expired or
                      revoked, or is not authorized to access this resource.
                    instance: null
                Incorrect API key error:
                  summary: Incorrect API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Incorrect API key error
                    status: 401
                    detail: The API key you provided does not exist or is expired
                      or revoked.
                    instance: null
        '402':
          description: Your account is overdue, please pay any outstanding invoices
            to continue using our services.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccountOverdueError'
              examples:
                Account overdue error:
                  summary: Account overdue error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#402-payment-required
                    title: Account overdue error
                    status: 402
                    detail: Your account is overdue, please pay any outstanding invoices
                      to continue using our services.
                    instance: null
        '403':
          description: You are not allowed to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccessForbiddenError'
              examples:
                Access forbidden error:
                  summary: Access forbidden error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: Access forbidden error
                    status: 403
                    detail: You are not allowed to access this resource.
                    instance: null
                No subscription error:
                  summary: No subscription error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: No subscription error
                    status: 403
                    detail: You do not have an active subscription to our zero-flat
                      fee, usage-based API plan.
                    instance: null
        '413':
          description: The request is larger than the server is willing or able to
            process.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RequestTooLargeError'
              examples:
                Request too large error:
                  summary: Request too large error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#413-request-too-large
                    title: Request too large error
                    status: 413
                    detail: The request is larger than the server is willing or able
                      to process.
                    instance: null
        '500':
          description: An unexpected error occurred while processing the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              examples:
                Internal server error:
                  summary: Internal server error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
                    title: Internal server error
                    status: 500
                    detail: An unexpected error occurred while processing the request.
                    instance: null
      deprecated: false
  /classifications/universal:
    post:
      tags:
      - Classifications
      summary: Universal classification
      description: Classify the relevance of legal documents to a query with an Isaacus
        universal legal AI classifier.
      operationId: CreateUniversalClassifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversalClassificationRequest'
        required: true
      responses:
        '200':
          description: The documents have been successfully classified.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversalClassificationResponse'
        '400':
          description: The request was invalid or could not be processed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Validation error:
                  summary: Validation error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Validation error
                    status: 400
                    detail: The request was invalid or could not be processed.
                    instance: null
                Invalid IQL query error:
                  summary: Invalid IQL query error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Invalid IQL query error
                    status: 400
                    detail: The provided query is not valid Isaacus Query Language
                      (IQL) syntax.
                    instance: null
                Query too long error:
                  summary: Query too long error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Query too long error
                    status: 400
                    detail: The provided query exceeds the model's maximum input length
                      less overhead.
                    instance: null
        '401':
          description: The API key you provided does not exist, is expired or revoked,
            or is not authorized to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAPIKeyError'
              examples:
                Unauthorized API key error:
                  summary: Unauthorized API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Unauthorized API key error
                    status: 401
                    detail: The API key you provided does not exist, is expired or
                      revoked, or is not authorized to access this resource.
                    instance: null
                Incorrect API key error:
                  summary: Incorrect API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Incorrect API key error
                    status: 401
                    detail: The API key you provided does not exist or is expired
                      or revoked.
                    instance: null
        '402':
          description: Your account is overdue, please pay any outstanding invoices
            to continue using our services.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccountOverdueError'
              examples:
                Account overdue error:
                  summary: Account overdue error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#402-payment-required
                    title: Account overdue error
                    status: 402
                    detail: Your account is overdue, please pay any outstanding invoices
                      to continue using our services.
                    instance: null
        '403':
          description: You are not allowed to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccessForbiddenError'
              examples:
                Access forbidden error:
                  summary: Access forbidden error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: Access forbidden error
                    status: 403
                    detail: You are not allowed to access this resource.
                    instance: null
                No subscription error:
                  summary: No subscription error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: No subscription error
                    status: 403
                    detail: You do not have an active subscription to our zero-flat
                      fee, usage-based API plan.
                    instance: null
        '413':
          description: The request is larger than the server is willing or able to
            process.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RequestTooLargeError'
              examples:
                Request too large error:
                  summary: Request too large error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#413-request-too-large
                    title: Request too large error
                    status: 413
                    detail: The request is larger than the server is willing or able
                      to process.
                    instance: null
        '500':
          description: An unexpected error occurred while processing the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              examples:
                Internal server error:
                  summary: Internal server error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
                    title: Internal server error
                    status: 500
                    detail: An unexpected error occurred while processing the request.
                    instance: null
                Chunking timeout error:
                  summary: Chunking timeout error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
                    title: Chunking timeout error
                    status: 500
                    detail: Chunking timed out. Did you try to chunk a very large
                      text with a very low chunk size or very little variation in
                      levels of whitespace?
                    instance: null
      deprecated: false
  /rerankings:
    post:
      tags:
      - Rerankings
      summary: Reranking
      description: Rerank legal documents by their relevance to a query with an Isaacus
        legal AI reranker.
      operationId: CreateReranking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RerankingRequest'
        required: true
      responses:
        '200':
          description: The documents have been successfully reranked.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RerankingResponse'
        '400':
          description: The request was invalid or could not be processed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Validation error:
                  summary: Validation error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Validation error
                    status: 400
                    detail: The request was invalid or could not be processed.
                    instance: null
                Invalid IQL query error:
                  summary: Invalid IQL query error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Invalid IQL query error
                    status: 400
                    detail: The provided query is not valid Isaacus Query Language
                      (IQL) syntax.
                    instance: null
                Query too long error:
                  summary: Query too long error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Query too long error
                    status: 400
                    detail: The provided query exceeds the model's maximum input length
                      less overhead.
                    instance: null
        '401':
          description: The API key you provided does not exist, is expired or revoked,
            or is not authorized to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAPIKeyError'
              examples:
                Unauthorized API key error:
                  summary: Unauthorized API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Unauthorized API key error
                    status: 401
                    detail: The API key you provided does not exist, is expired or
                      revoked, or is not authorized to access this resource.
                    instance: null
                Incorrect API key error:
                  summary: Incorrect API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Incorrect API key error
                    status: 401
                    detail: The API key you provided does not exist or is expired
                      or revoked.
                    instance: null
        '402':
          description: Your account is overdue, please pay any outstanding invoices
            to continue using our services.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccountOverdueError'
              examples:
                Account overdue error:
                  summary: Account overdue error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#402-payment-required
                    title: Account overdue error
                    status: 402
                    detail: Your account is overdue, please pay any outstanding invoices
                      to continue using our services.
                    instance: null
        '403':
          description: You are not allowed to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccessForbiddenError'
              examples:
                Access forbidden error:
                  summary: Access forbidden error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: Access forbidden error
                    status: 403
                    detail: You are not allowed to access this resource.
                    instance: null
                No subscription error:
                  summary: No subscription error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: No subscription error
                    status: 403
                    detail: You do not have an active subscription to our zero-flat
                      fee, usage-based API plan.
                    instance: null
        '413':
          description: The request is larger than the server is willing or able to
            process.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RequestTooLargeError'
              examples:
                Request too large error:
                  summary: Request too large error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#413-request-too-large
                    title: Request too large error
                    status: 413
                    detail: The request is larger than the server is willing or able
                      to process.
                    instance: null
        '500':
          description: An unexpected error occurred while processing the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              examples:
                Internal server error:
                  summary: Internal server error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
                    title: Internal server error
                    status: 500
                    detail: An unexpected error occurred while processing the request.
                    instance: null
                Chunking timeout error:
                  summary: Chunking timeout error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
                    title: Chunking timeout error
                    status: 500
                    detail: Chunking timed out. Did you try to chunk a very large
                      text with a very low chunk size or very little variation in
                      levels of whitespace?
                    instance: null
      deprecated: false
  /extractions/qa:
    post:
      tags:
      - Extractions
      summary: Extractive question answering
      description: Extract answers to questions from legal documents with an Isaacus
        legal AI answer extractor.
      operationId: CreateAnswerExtractions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerExtractionRequest'
        required: true
      responses:
        '200':
          description: The documents have been successfully processed.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerExtractionResponse'
        '400':
          description: The request was invalid or could not be processed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Validation error:
                  summary: Validation error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Validation error
                    status: 400
                    detail: The request was invalid or could not be processed.
                    instance: null
                Query too long error:
                  summary: Query too long error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#400-validation-error
                    title: Query too long error
                    status: 400
                    detail: The provided query exceeds the model's maximum input length
                      less overhead.
                    instance: null
        '401':
          description: The API key you provided does not exist, is expired or revoked,
            or is not authorized to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAPIKeyError'
              examples:
                Unauthorized API key error:
                  summary: Unauthorized API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Unauthorized API key error
                    status: 401
                    detail: The API key you provided does not exist, is expired or
                      revoked, or is not authorized to access this resource.
                    instance: null
                Incorrect API key error:
                  summary: Incorrect API key error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
                    title: Incorrect API key error
                    status: 401
                    detail: The API key you provided does not exist or is expired
                      or revoked.
                    instance: null
        '402':
          description: Your account is overdue, please pay any outstanding invoices
            to continue using our services.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccountOverdueError'
              examples:
                Account overdue error:
                  summary: Account overdue error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#402-payment-required
                    title: Account overdue error
                    status: 402
                    detail: Your account is overdue, please pay any outstanding invoices
                      to continue using our services.
                    instance: null
        '403':
          description: You are not allowed to access this resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AccessForbiddenError'
              examples:
                Access forbidden error:
                  summary: Access forbidden error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: Access forbidden error
                    status: 403
                    detail: You are not allowed to access this resource.
                    instance: null
                No subscription error:
                  summary: No subscription error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
                    title: No subscription error
                    status: 403
                    detail: You do not have an active subscription to our zero-flat
                      fee, usage-based API plan.
                    instance: null
        '413':
          description: The request is larger than the server is willing or able to
            process.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RequestTooLargeError'
              examples:
                Request too large error:
                  summary: Request too large error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#413-request-too-large
                    title: Request too large error
                    status: 413
                    detail: The request is larger than the server is willing or able
                      to process.
                    instance: null
        '500':
          description: An unexpected error occurred while processing the request.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
              examples:
                Internal server error:
                  summary: Internal server error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
                    title: Internal server error
                    status: 500
                    detail: An unexpected error occurred while processing the request.
                    instance: null
                Chunking timeout error:
                  summary: Chunking timeout error
                  value:
                    type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
                    title: Chunking timeout error
                    status: 500
                    detail: Chunking timed out. Did you try to chunk a very large
                      text with a very low chunk size or very little variation in
                      levels of whitespace?
                    instance: null
      deprecated: false
components:
  schemas:
    AccessForbiddenError:
      properties:
        type:
          type: string
          minLength: 1
          description: A URI reference that identifies the problem type.
          default: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
          examples:
          - https://docs.isaacus.com/api-reference/errors#403-access-forbidden
        title:
          type: string
          minLength: 1
          description: A short, human-readable summary of the problem type.
          default: Access forbidden error
          examples:
          - Access forbidden error
        status:
          type: integer
          const: 403
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          default: 403
          examples:
          - 403
        detail:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            default: You are not allowed to access this resource.
            examples:
            - A string.
          - type: 'null'
          description: An optional human-readable explanation specific to this occurrence
            of the problem.
          default: You are not allowed to access this resource.
          examples:
          - You are not allowed to access this resource.
        instance:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            examples:
            - A string.
          - type: 'null'
          description: An optional URI reference that identifies the specific occurrence
            of the problem.
          examples:
          - null
      type: object
      required: []
      title: Access forbidden error
      description: An RFC 7807 problem detail object.
      examples:
      - type: https://docs.isaacus.com/api-reference/errors#403-access-forbidden
        title: Access forbidden error
        status: 403
        detail: You are not allowed to access this resource.
        instance: null
    AccountOverdueError:
      properties:
        type:
          type: string
          minLength: 1
          description: A URI reference that identifies the problem type.
          default: https://docs.isaacus.com/api-reference/errors#402-payment-required
          examples:
          - https://docs.isaacus.com/api-reference/errors#402-payment-required
        title:
          type: string
          minLength: 1
          description: A short, human-readable summary of the problem type.
          default: Account overdue error
          examples:
          - Account overdue error
        status:
          type: integer
          const: 402
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          default: 402
          examples:
          - 402
        detail:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            default: Your account is overdue, please pay any outstanding invoices
              to continue using our services.
            examples:
            - A string.
          - type: 'null'
          description: An optional human-readable explanation specific to this occurrence
            of the problem.
          default: Your account is overdue, please pay any outstanding invoices to
            continue using our services.
          examples:
          - Your account is overdue, please pay any outstanding invoices to continue
            using our services.
        instance:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            examples:
            - A string.
          - type: 'null'
          description: An optional URI reference that identifies the specific occurrence
            of the problem.
          examples:
          - null
      type: object
      required: []
      title: Account overdue error
      description: An RFC 7807 problem detail object.
      examples:
      - type: https://docs.isaacus.com/api-reference/errors#402-payment-required
        title: Account overdue error
        status: 402
        detail: Your account is overdue, please pay any outstanding invoices to continue
          using our services.
        instance: null
    Answer:
      properties:
        text:
          type: string
          minLength: 1
          description: The text of the answer.
          examples:
          - 30 years if the person murdered was a police officer and 25 years in any
            other case
        start:
          type: integer
          exclusiveMinimum: -1.0
          description: The index of the first character of the answer in the text,
            starting from `0` (and, therefore, ending at the number of characters
            in the text minus `1`).
          examples:
          - 61
        end:
          type: integer
          exclusiveMinimum: -1.0
          description: The index of the character immediately after the last character
            of the answer in the text, starting from `0` (such that, in Python, the
            answer is equivalent to `text[start:end]`).
          examples:
          - 144
        score:
          type: number
          maximum: 1.0
          minimum: 0.0
          description: A score between `0` and `1`, inclusive, representing the strength
            of the answer.
          examples:
          - 0.11460486645671249
      type: object
      required:
      - end
      - score
      - start
      - text
      title: Answer
      description: An answer extracted from a text.
      examples:
      - text: 30 years if the person murdered was a police officer and 25 years in
          any other case
        start: 61
        end: 144
        score: 0.11460486645671249
    AnswerExtraction:
      properties:
        index:
          type: integer
          exclusiveMinimum: -1.0
          description: The index of the text in the input array of texts that this
            result represents, starting from `0` (and, therefore, ending at the number
            of texts minus `1`).
          examples:
          - 0
        answers:
          items:
            $ref: '#/components/schemas/Answer'
          type: array
          description: Answers extracted from the text, ordered from highest to lowest
            score.
          examples:
          - - text: 30 years if the person murdered was a police officer and 25 years
                in any other case
              start: 61
              end: 144
              score: 0.11460486645671249
        inextractability_score:
          type: number
          maximum: 1.0
          minimum: 0.0
          description: 'A score between `0` and `1`, inclusive, representing the likelihood
            that an answer can not be extracted from the text.


            Where this score is greater than the highest score of all possible answers,
            the text should be regarded as not having an extractable answer to the
            query. If that is the case and `ignore_inextractability` is `false`, no
            answers will be returned.'
          examples:
          - 0.0027424068182309302
      type: object
      required:
      - answers
      - index
      - inextractability_score
      title: Answer extraction
      description: The result of extracting answers from a text.
      examples:
      - index: 0
        inextractability_score: 0.0027424068182309302
        answers:
        - text: 30 years if the person murdered was a police officer and 25 years
            in any other case
          start: 61
          end: 144
          score: 0.11460486645671249
    AnswerExtractionRequest:
      properties:
        model:
          type: string
          enum:
          - kanon-answer-extractor
          - kanon-answer-extractor-mini
          description: The ID of the [model](https://docs.isaacus.com/models#extractive-qa)
            to use for extractive question answering.
          examples:
          - kanon-answer-extractor
        query:
          type: string
          maxLength: 5000
          minLength: 1
          pattern: \S
          description: 'The query to extract the answer to.


            The query must contain at least one non-whitespace character.


            Unlike the texts from which the answer will be extracted, the query cannot
            be so long that it exceeds the maximum input length of the model.'
          examples:
          - What is the punishment for murder in Victoria?
        texts:
          items:
            type: string
            title: Non-blank string
            examples:
            - A string.
          type: array
          description: 'The texts to search for the answer in and extract the answer
            from.


            There must be at least one text.


            Each text must contain at least one non-whitespace character.'
          examples:
          - - The standard sentence for murder in the State of Victoria is 30 years
              if the person murdered was a police officer and 25 years in any other
              case.
        ignore_inextractability:
          type: boolean
          description: 'Whether to, if the model''s score of the likelihood that an
            answer can not be extracted from a text is greater than the highest score
            of all possible answers, still return the highest scoring answers for
            that text.


            If you have already determined that the texts answer the query, for example,
            by using one of our classification or reranker models, then you should
            set this to `true`.'
          default: false
          examples:
          - false
        top_k:
          type: integer
          minimum: 1.0
          description: 'The number of highest scoring answers to return.


            If `null`, which is the default, all answers will be returned.'
          default: 1
          examples:
          - 1
        chunking_options:
          oneOf:
          - $ref: '#/components/schemas/ChunkingOptions'
          - type: 'null'
          description: 'Settings for how texts should be chunked into smaller segments
            by [semchunk](https://github.com/isaacus-dev/semchunk) before extraction.


            If `null`, the texts will not be chunked and will instead be truncated
            to the maximum input length of the model less overhead if found to exceed
            that limit.'
          examples:
          - size: null
            overlap_ratio: null
            overlap_tokens: null
      type: object
      required:
      - model
      - query
      - texts
      title: Answer extraction request
      description: A request to extract answers from legal documents with an Isaacus
        legal AI extractive question answering model.
      examples:
      - model: kanon-answer-extractor
        query: What is the punishment for murder in Victoria?
        texts:
        - The standard sentence for murder in the State of Victoria is 30 years if
          the person murdered was a police officer and 25 years in any other case.
    AnswerExtractionResponse:
      properties:
        extractions:
          items:
            $ref: '#/components/schemas/AnswerExtraction'
          type: array
          description: The results of extracting answers from the texts, ordered from
            highest to lowest answer confidence score (or else lowest to highest inextractability
            score if there are no answers for a text).
          examples:
          - - index: 0
              answers:
              - text: 30 years if the person murdered was a police officer and 25
                  years in any other case
                start: 61
                end: 144
                score: 0.11460486645671249
              inextractability_score: 0.0027424068182309302
        usage:
          $ref: '#/components/schemas/AnswerExtractionUsage'
      type: object
      required:
      - extractions
      - usage
      title: Answer extraction response
      description: The results of extracting answers from texts.
      examples:
      - extractions:
        - index: 0
          answers:
          - text: 30 years if the person murdered was a police officer and 25 years
              in any other case
            start: 61
            end: 144
            score: 0.11460486645671249
          inextractability_score: 0.0027424068182309302
        usage:
          input_tokens: 43
    AnswerExtractionUsage:
      properties:
        input_tokens:
          type: integer
          minimum: 1.0
          description: The number of tokens inputted to the model.
          examples:
          - 43
      type: object
      required:
      - input_tokens
      title: Answer extraction usage
      description: Statistics about the usage of resources in the process of extracting
        answers from the texts.
      examples:
      - input_tokens: 43
    ChunkingOptions:
      properties:
        size:
          oneOf:
          - type: integer
            minimum: 1.0
            title: Positive integer
            description: A whole number greater than or equal to 1.
            examples:
            - 1
          - type: 'null'
          description: 'The maximum number of tokens allowed in a chunk.


            If `null`, the maximum input length of the model will be used less overhead.'
          examples:
          - 512
        overlap_ratio:
          oneOf:
          - type: number
            exclusiveMaximum: 1.0
            minimum: 0.0
            title: Unit interval (closed, open)
            description: A number greater than or equal to 0 and less than 1.
            examples:
            - 0.5
          - type: 'null'
          description: 'The proportion of the chunk size by which chunks should overlap.


            The ratio must be less than 1.


            If `null`, no overlapping will occur unless `overlap_tokens` is set.


            `overlap_ratio` and `overlap_tokens` cannot both be set.'
          examples:
          - 0.1
          - null
        overlap_tokens:
          oneOf:
          - type: integer
            exclusiveMinimum: -1.0
            title: Non-negative integer
            description: A whole number greater than -1.
            examples:
            - 0
          - type: 'null'
          description: 'The number of tokens by which chunks should overlap.


            If `null`, no overlapping will occur unless `overlap_ratio` is set.


            `overlap_tokens` and `overlap_ratio` cannot both be set.'
          examples:
          - null
          - 10
      type: object
      required: []
      title: Chunking options
      description: Options for how to split text into smaller chunks.
      examples:
      - size: 512
        overlap_ratio: 0.1
      - size: 512
        overlap_tokens: 10
      - size: 512
    Embedding:
      properties:
        index:
          type: integer
          exclusiveMinimum: -1.0
          description: The position of the content in the input array of contents,
            starting from `0` (and, therefore, ending at the number of contents minus
            `1`).
          examples:
          - 0
        embedding:
          items:
            type: number
          type: array
          description: The embedding of the content represented as an array of floating
            point numbers.
          examples:
          - - -0.0258
            - 0.02062
            - -0.0114
      type: object
      required:
      - embedding
      - index
      title: Embedding
      examples:
      - index: 0
        embedding:
        - -0.0258
        - 0.02062
        - -0.0114
    EmbeddingRequest:
      properties:
        model:
          type: string
          const: kanon-2-embedder
          description: The ID of the [model](https://docs.isaacus.com/models#embedding)
            to use for embedding.
          examples:
          - kanon-2-embedder
        texts:
          oneOf:
          - items:
              type: string
              title: Non-blank string
              examples:
              - A string.
            type: array
          - type: string
            title: Non-blank string
            examples:
            - A string.
          description: 'The text or array of texts to embed.


            Each text must contain at least one non-whitespace character.


            No more than 1,000 texts can be embedded in a single request.'
          examples:
          - - Are restraints of trade enforceable under English law?
            - What is a non-compete clause?
        task:
          type:
          - 'null'
          - string
          enum:
          - retrieval/query
          - retrieval/document
          - null
          description: 'The task the embeddings will be used for.


            `retrieval/query` is meant for queries and statements, and `retrieval/document`
            is meant for anything to be retrieved using query embeddings.


            If `null`, which is the default setting, embeddings will not be optimized
            for any particular task.'
          examples:
          - retrieval/query
        overflow_strategy:
          type:
          - 'null'
          - string
          enum:
          - drop_end
          - null
          description: 'The strategy to employ when content exceeds the model''s maximum
            input length.


            `drop_end`, which is the default setting, drops tokens from the end of
            the content exceeding the limit.


            If `null`, an error will be raised if any content exceeds the model''s
            maximum input length.'
          default: drop_end
          examples:
          - drop_end
        dimensions:
          oneOf:
          - type: integer
            minimum: 1.0
            title: Positive integer
            description: A whole number greater than or equal to 1.
            examples:
            - 1
          - type: 'null'
          description: 'The number of dimensions the embeddings should have, not exceeding
            the maximum dimensions of the model.


            If `null`, the model''s default dimensions will be used.'
          examples:
          - 1792
      type: object
      required:
      - model
      - texts
      title: Embedding request
      description: A request to embed legal texts with an Isaacus legal AI embedder.
      examples:
      - model: kanon-2-embedder
        texts:
        - Are restraints of trade enforceable under English law?
        - What is a non-compete clause?
        task: retrieval/query
    EmbeddingResponse:
      properties:
        embeddings:
          items:
            $ref: '#/components/schemas/Embedding'
          type: array
          description: The embeddings of the inputs.
          examples:
          - - index: 0
              embedding:
              - -0.0258
              - 0.02062
              - -0.0114
            - index: 1
              embedding:
              - -0.0358
              - -0.0128
              - 0.00251
        usage:
          $ref: '#/components/schemas/EmbeddingUsage'
      type: object
      required:
      - embeddings
      - usage
      title: Embedding response
      description: Embeddings of legal texts produced by an Isaacus legal AI embedder.
      examples:
      - embeddings:
        - index: 0
          embedding:
          - -0.0258
          - 0.02062
          - -0.0114
        - index: 1
          embedding:
          - -0.0358
          - -0.0128
          - 0.00251
        usage:
          input_tokens: 42
    EmbeddingUsage:
      properties:
        input_tokens:
          type: integer
          minimum: 1.0
          description: The number of tokens inputted to the model.
          examples:
          - 42
      type: object
      required:
      - input_tokens
      title: Embedding usage
      description: Statistics about the usage of resources in the process of embedding
        the inputs.
      examples:
      - input_tokens: 42
    InternalServerError:
      properties:
        type:
          type: string
          minLength: 1
          description: A URI reference that identifies the problem type.
          default: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
          examples:
          - https://docs.isaacus.com/api-reference/errors#500-internal-server-error
        title:
          type: string
          minLength: 1
          description: A short, human-readable summary of the problem type.
          default: Internal server error
          examples:
          - Internal server error
        status:
          type: integer
          const: 500
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          default: 500
          examples:
          - 500
        detail:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            default: An unexpected error occurred while processing the request.
            examples:
            - A string.
          - type: 'null'
          description: An optional human-readable explanation specific to this occurrence
            of the problem.
          default: An unexpected error occurred while processing the request.
          examples:
          - An unexpected error occurred while processing the request.
        instance:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            examples:
            - A string.
          - type: 'null'
          description: An optional URI reference that identifies the specific occurrence
            of the problem.
          examples:
          - null
      type: object
      required: []
      title: Internal server error
      description: An RFC 7807 problem detail object.
      examples:
      - type: https://docs.isaacus.com/api-reference/errors#500-internal-server-error
        title: Internal server error
        status: 500
        detail: An unexpected error occurred while processing the request.
        instance: null
    RequestTooLargeError:
      properties:
        type:
          type: string
          minLength: 1
          description: A URI reference that identifies the problem type.
          default: https://docs.isaacus.com/api-reference/errors#413-request-too-large
          examples:
          - https://docs.isaacus.com/api-reference/errors#413-request-too-large
        title:
          type: string
          minLength: 1
          description: A short, human-readable summary of the problem type.
          default: Request too large error
          examples:
          - Request too large error
        status:
          type: integer
          const: 413
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          default: 413
          examples:
          - 413
        detail:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            default: The request is larger than the server is willing or able to process.
            examples:
            - A string.
          - type: 'null'
          description: An optional human-readable explanation specific to this occurrence
            of the problem.
          default: The request is larger than the server is willing or able to process.
          examples:
          - The request is larger than the server is willing or able to process.
        instance:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            examples:
            - A string.
          - type: 'null'
          description: An optional URI reference that identifies the specific occurrence
            of the problem.
          examples:
          - null
      type: object
      required: []
      title: Request too large error
      description: An RFC 7807 problem detail object.
      examples:
      - type: https://docs.isaacus.com/api-reference/errors#413-request-too-large
        title: Request too large error
        status: 413
        detail: The request is larger than the server is willing or able to process.
        instance: null
    RerankingRequest:
      properties:
        model:
          type: string
          enum:
          - kanon-universal-classifier
          - kanon-universal-classifier-mini
          description: The ID of the [model](https://docs.isaacus.com/models#reranking)
            to use for reranking.
          examples:
          - kanon-universal-classifier
        query:
          type: string
          maxLength: 5000
          minLength: 1
          pattern: \S
          description: 'The query to evaluate the relevance of the texts to.


            The query must contain at least one non-whitespace character.


            Unlike the texts being reranked, the query cannot be so long that it exceeds
            the maximum input length of the reranker.'
          examples:
          - What are the essential elements required to establish a negligence claim?
        texts:
          items:
            type: string
            title: Non-blank string
            examples:
            - A string.
          type: array
          description: 'The texts to rerank.


            There must be at least one text.


            Each text must contain at least one non-whitespace character.'
          examples:
          - - To form a contract, there must be an offer, acceptance, consideration,
              and mutual intent to be bound.
            - Criminal cases involve a completely different standard, requiring proof
              beyond a reasonable doubt.
            - In a negligence claim, the plaintiff must prove duty, breach, causation,
              and damages.
            - Negligence in tort law requires establishing a duty of care that the
              defendant owed to the plaintiff.
            - The concept of negligence is central to tort law, with courts assessing
              whether a breach of duty caused harm.
        top_n:
          oneOf:
          - type: integer
            minimum: 1.0
            title: Positive integer
            description: A whole number greater than or equal to 1.
            examples:
            - 1
          - type: 'null'
          description: 'The number of highest scoring results to return.


            If `null`, which is the default, all results will be returned.'
          examples:
          - null
        is_iql:
          type: boolean
          description: 'Whether the query should be interpreted as an [Isaacus Query
            Language (IQL)](https://docs.isaacus.com/iql) query, which is not the
            case by default.


            If you allow untrusted users to construct their own queries, think carefully
            before enabling IQL since queries can be crafted to consume an excessively
            large amount of tokens.'
          default: false
          examples:
          - false
        scoring_method:
          type: string
          enum:
          - auto
          - chunk_max
          - chunk_avg
          - chunk_min
          description: 'The method to use for producing an overall relevance score
            for a text.


            `auto` is the default scoring method and is recommended for most use cases.
            Currently, it is equivalent to `chunk_max`. In the future, it will automatically
            select the best method based on the model and inputs.


            `chunk_max` uses the highest relevance score of all of a text''s chunks.


            `chunk_avg` averages the relevance scores of all of a text''s chunks.


            `chunk_min` uses the lowest relevance score of all of a text''s chunks.'
          default: auto
          examples:
          - auto
        chunking_options:
          oneOf:
          - $ref: '#/components/schemas/ChunkingOptions'
          - type: 'null'
          description: 'Settings for how texts should be chunked into smaller segments
            by [semchunk](https://github.com/isaacus-dev/semchunk) before reranking.


            If `null`, the texts will not be chunked and will instead be truncated
            to the maximum input length of the reranker less overhead if found to
            exceed that limit.'
          examples:
          - size: null
            overlap_ratio: null
            overlap_tokens: null
      type: object
      required:
      - model
      - query
      - texts
      title: Reranking request
      description: A request to rerank legal documents by their relevance to a query
        with an Isaacus legal AI reranker.
      examples:
      - model: kanon-universal-classifier
        query: What are the essential elements required to establish a negligence
          claim?
        texts:
        - To form a contract, there must be an offer, acceptance, consideration, and
          mutual intent to be bound.
        - Criminal cases involve a completely different standard, requiring proof
          beyond a reasonable doubt.
        - In a negligence claim, the plaintiff must prove duty, breach, causation,
          and damages.
        - Negligence in tort law requires establishing a duty of care that the defendant
          owed to the plaintiff.
        - The concept of negligence is central to tort law, with courts assessing
          whether a breach of duty caused harm.
    RerankingResponse:
      properties:
        results:
          items:
            $ref: '#/components/schemas/RerankingResult'
          type: array
          description: The rerankings of the texts, by relevance to the query, in
            order from highest to lowest relevance score.
          examples:
          - - index: 2
              score: 0.7727372261985272
            - index: 3
              score: 0.7332913519466231
            - index: 4
              score: 0.32399687407609323
            - index: 1
              score: 0.09480246485705024
            - index: 0
              score: 0.06929198572432578
        usage:
          $ref: '#/components/schemas/RerankingUsage'
      type: object
      required:
      - results
      - usage
      title: Reranking response
      description: The reranking of texts, by relevance to a query, out of an input
        array of texts.
      examples:
      - results:
        - index: 2
          score: 0.7727372261985272
        - index: 3
          score: 0.7332913519466231
        - index: 4
          score: 0.32399687407609323
        - index: 1
          score: 0.09480246485705024
        - index: 0
          score: 0.06929198572432578
        usage:
          input_tokens: 170
    RerankingResult:
      properties:
        index:
          type: integer
          exclusiveMinimum: -1.0
          description: The index of the text in the input array of texts, starting
            from `0` (and, therefore, ending at the number of texts minus `1`).
          examples:
          - 2
        score:
          type: number
          maximum: 1.0
          minimum: 0.0
          description: A score between `0` and `1`, inclusive, representing the relevance
            of the text to the query.
          examples:
          - 0.7727372261985272
      type: object
      required:
      - index
      - score
      title: Reranking result
      examples:
      - index: 2
        score: 0.7727372261985272
    RerankingUsage:
      properties:
        input_tokens:
          type: integer
          minimum: 1.0
          description: The number of tokens inputted to the model.
          examples:
          - 170
      type: object
      required:
      - input_tokens
      title: Reranking usage
      description: Statistics about the usage of resources in the process of reranking
        the texts.
      examples:
      - input_tokens: 170
    UnauthorizedAPIKeyError:
      properties:
        type:
          type: string
          minLength: 1
          description: A URI reference that identifies the problem type.
          default: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
          examples:
          - https://docs.isaacus.com/api-reference/errors#401-not-authenticated
        title:
          type: string
          minLength: 1
          description: A short, human-readable summary of the problem type.
          default: Unauthorized API key error
          examples:
          - Unauthorized API key error
        status:
          type: integer
          const: 401
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          default: 401
          examples:
          - 401
        detail:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            default: The API key you provided does not exist, is expired or revoked,
              or is not authorized to access this resource.
            examples:
            - A string.
          - type: 'null'
          description: An optional human-readable explanation specific to this occurrence
            of the problem.
          default: The API key you provided does not exist, is expired or revoked,
            or is not authorized to access this resource.
          examples:
          - The API key you provided does not exist, is expired or revoked, or is
            not authorized to access this resource.
        instance:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            examples:
            - A string.
          - type: 'null'
          description: An optional URI reference that identifies the specific occurrence
            of the problem.
          examples:
          - null
      type: object
      required: []
      title: Unauthorized API key error
      description: An RFC 7807 problem detail object.
      examples:
      - type: https://docs.isaacus.com/api-reference/errors#401-not-authenticated
        title: Unauthorized API key error
        status: 401
        detail: The API key you provided does not exist, is expired or revoked, or
          is not authorized to access this resource.
        instance: null
    UniversalClassification:
      properties:
        index:
          type: integer
          exclusiveMinimum: -1.0
          description: The index of the text in the input array of texts, starting
            from `0` (and, therefore, ending at the number of texts minus `1`).
          examples:
          - 0
        score:
          type: number
          maximum: 1.0
          minimum: 0.0
          description: 'A score of the likelihood that the query expressed about the
            text is supported by the text.


            A score greater than `0.5` indicates that the text supports the query,
            while a score less than `0.5` indicates that the text does not support
            the query.'
          examples:
          - 0.8825573934438159
        chunks:
          oneOf:
          - items:
              $ref: '#/components/schemas/UniversalClassificationChunk'
            type: array
          - type: 'null'
          description: 'The text as broken into chunks by [semchunk](https://github.com/isaacus-dev/semchunk),
            each chunk with its own confidence score, ordered from highest to lowest
            score.


            If no chunking occurred, this will be `null`.'
          examples:
          - - index: 0
              start: 0
              end: 46
              score: 0.8825573934438159
              text: I agree not to tell anyone about the document.
      type: object
      required:
      - chunks
      - index
      - score
      title: Universal classification
      examples:
      - index: 0
        score: 0.8825573934438159
        chunks:
        - index: 0
          start: 0
          end: 46
          score: 0.8825573934438159
          text: I agree not to tell anyone about the document.
    UniversalClassificationChunk:
      properties:
        index:
          type: integer
          exclusiveMinimum: -1.0
          description: The original position of the chunk in the outputted list of
            chunks before sorting, starting from `0` (and, therefore, ending at the
            number of chunks minus `1`).
          examples:
          - 0
        start:
          type: integer
          exclusiveMinimum: -1.0
          description: The index of the character in the original text where the chunk
            starts, beginning from `0`.
          examples:
          - 0
        end:
          type: integer
          minimum: 1.0
          description: The index of the character immediately after the last character
            of the chunk in the original text, beginning from `0` (such that, in Python,
            the chunk is equivalent to `text[start:end]`).
          examples:
          - 46
        score:
          type: number
          maximum: 1.0
          minimum: 0.0
          description: 'The model''s score of the likelihood that the query expressed
            about the chunk is supported by the chunk.


            A score greater than `0.5` indicates that the chunk supports the query,
            while a score less than `0.5` indicates that the chunk does not support
            the query.'
          examples:
          - 0.8825573934438159
        text:
          type: string
          minLength: 1
          description: The text of the chunk.
          examples:
          - I agree not to tell anyone about the document.
      type: object
      required:
      - end
      - index
      - score
      - start
      - text
      title: Universal classification chunk
      examples:
      - index: 0
        start: 0
        end: 46
        score: 0.8825573934438159
        text: I agree not to tell anyone about the document.
    UniversalClassificationRequest:
      properties:
        model:
          type: string
          enum:
          - kanon-universal-classifier
          - kanon-universal-classifier-mini
          description: The ID of the [model](https://docs.isaacus.com/models#universal-classification)
            to use for universal classification.
          examples:
          - kanon-universal-classifier
        query:
          type: string
          maxLength: 5000
          minLength: 1
          pattern: \S
          description: 'The [Isaacus Query Language (IQL)](https://docs.isaacus.com/iql)
            query or, if IQL is disabled, the statement, to evaluate the texts against.


            The query must contain at least one non-whitespace character.


            Unlike the texts being classified, the query cannot be so long that it
            exceeds the maximum input length of the universal classifier.'
          examples:
          - This is a confidentiality clause.
          - '{IS confidentiality clause} AND {IS clause obligating "Supplier"} AND
            {IS unilateral clause}'
        texts:
          items:
            type: string
            title: Non-blank string
            examples:
            - A string.
          type: array
          description: 'The texts to classify.


            Each text must contain at least one non-whitespace character.'
          examples:
          - - I agree not to tell anyone about the document.
        is_iql:
          type: boolean
          description: Whether the query should be interpreted as an [IQL](https://docs.isaacus.com/iql)
            query or else as a statement.
          default: true
          examples:
          - true
        scoring_method:
          type: string
          enum:
          - auto
          - chunk_max
          - chunk_avg
          - chunk_min
          description: 'The method to use for producing an overall confidence score.


            `auto` is the default scoring method and is recommended for most use cases.
            Currently, it is equivalent to `chunk_max`. In the future, it will automatically
            select the best method based on the model and inputs.


            `chunk_max` uses the highest confidence score of all of the texts'' chunks.


            `chunk_avg` averages the confidence scores of all of the texts'' chunks.


            `chunk_min` uses the lowest confidence score of all of the texts'' chunks.'
          default: auto
          examples:
          - auto
        chunking_options:
          oneOf:
          - $ref: '#/components/schemas/ChunkingOptions'
          - type: 'null'
          description: 'Settings for how the texts should be chunked into smaller
            segments before classification using [semchunk](https://github.com/isaacus-dev/semchunk).


            If `null`, the texts will not be chunked and will instead be truncated
            to the maximum input length of the model less overhead if found to exceed
            that limit.'
          examples:
          - size: 512
            overlap_ratio: null
            overlap_tokens: null
      type: object
      required:
      - model
      - query
      - texts
      title: Universal classification request
      description: A request to classify the relevance of legal documents to a query
        with an Isaacus universal legal AI classifier.
      examples:
      - model: kanon-universal-classifier
        query: This is a confidentiality clause.
        texts:
        - I agree not to tell anyone about the document.
    UniversalClassificationResponse:
      properties:
        classifications:
          items:
            $ref: '#/components/schemas/UniversalClassification'
          type: array
          description: The classifications of the texts, by relevance to the query,
            in order from highest to lowest relevance score.
          examples:
          - - index: 0
              score: 0.8825573934438159
              chunks:
              - index: 0
                start: 0
                end: 46
                score: 0.8825573934438159
                text: I agree not to tell anyone about the document.
        usage:
          $ref: '#/components/schemas/UniversalClassificationUsage'
      type: object
      required:
      - classifications
      - usage
      title: Universal classification response
      description: Classifications of the relevance of legal documents to a query
        produced by an Isaacus universal legal AI classifier.
      examples:
      - classifications:
        - index: 0
          score: 0.8825573934438159
          chunks:
          - index: 0
            start: 0
            end: 46
            score: 0.8825573934438159
            text: I agree not to tell anyone about the document.
        usage:
          input_tokens: 19
    UniversalClassificationUsage:
      properties:
        input_tokens:
          type: integer
          minimum: 1.0
          description: The number of tokens inputted to the model.
          examples:
          - 19
      type: object
      required:
      - input_tokens
      title: Universal classification usage
      description: Statistics about the usage of resources in the process of classifying
        the text.
      examples:
      - input_tokens: 19
    ValidationError:
      properties:
        type:
          type: string
          minLength: 1
          description: A URI reference that identifies the problem type.
          default: https://docs.isaacus.com/api-reference/errors#400-validation-error
          examples:
          - https://docs.isaacus.com/api-reference/errors#400-validation-error
        title:
          type: string
          minLength: 1
          description: A short, human-readable summary of the problem type.
          default: Validation error
          examples:
          - Validation error
        status:
          type: integer
          const: 400
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          default: 400
          examples:
          - 400
        detail:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            default: The request was invalid or could not be processed.
            examples:
            - A string.
          - type: 'null'
          description: An optional human-readable explanation specific to this occurrence
            of the problem.
          default: The request was invalid or could not be processed.
          examples:
          - The request was invalid or could not be processed.
        instance:
          oneOf:
          - type: string
            title: Non-empty string
            description: A string with at least one character.
            examples:
            - A string.
          - type: 'null'
          description: An optional URI reference that identifies the specific occurrence
            of the problem.
          examples:
          - null
      type: object
      required: []
      title: Validation error
      description: An RFC 7807 problem detail object.
      examples:
      - type: https://docs.isaacus.com/api-reference/errors#400-validation-error
        title: Validation error
        status: 400
        detail: The request was invalid or could not be processed.
        instance: null
  securitySchemes:
    APIKeyBearerTokenAuth:
      type: http
      description: 'An Isaacus-issued API key passed as a bearer token via the `Authorization`
        header in the format `Authorization: Bearer YOUR_API_KEY`.'
      scheme: bearer
      bearerFormat: iuak_v1_APIKEYSECRET_CHECKSUM
security:
- APIKeyBearerTokenAuth: []
tags:
- name: Embeddings
  description: Embed legal texts with Isaacus legal AI embedders.
- name: Classifications
  description: Classify legal documents with Isaacus legal AI classifiers.
- name: Rerankings
  description: Rerank legal documents by their relevance to queries with Isaacus legal
    AI rerankers.
- name: Extractions
  description: Extract information from legal documents with Isaacus legal AI extractors.
externalDocs:
  url: https://docs.isaacus.com/api-reference
  description: Reference documentation for the Isaacus API.
